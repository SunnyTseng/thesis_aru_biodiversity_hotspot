.x$common_name) %>%
sort(decreasing = T)))
site_level <- list()
site_level[[1]] <- c(site_all %>% .[1, 2] %>% as.numeric(),
site_group$detections_named[[1]])
site_level[[2]] <- c(site_all %>% .[2, 2] %>% as.numeric(),
site_group$detections_named[[2]])
site_level[[3]] <- c(site_all %>% .[3, 2] %>% as.numeric(),
site_group$detections_named[[3]])
names(site_level) <- site_group %>% pull(group)
### iNEXT - survey sites
out <- iNEXT(site_level,          # The data frame
q=0,                    # The type of diversity estimator (see discussion of the options below)
datatype="incidence_freq",   # The type of analysis
knots=40,                    # The number of data points in your line (more = smoother)
se=TRUE,                     # Logical statement if you want confidence intervals
conf=0.95,                   # The level of confidence intervals
nboot=50)                    # The number of replications to perform - this generates your confidence interval - the bigger the number the longer the run time
### iNEXT - survey sites (shrub height, groupd measure with kmeans)
p_shrub_height <- ggiNEXT(out, type = 1, color.var = "Assemblage") +
theme_classic() +   #  type 1 = the diversity estimator
labs(x = "ARU days", y = "Richness") +
ggtitle("Shrub Height")
p_shrub_height
### Library
library(tidyverse)
library(here)
library(iNEXT)
library(patchwork)
library(lubridate)
library(pastecs) # won't work if you have not installed the package first!!
library(graphics)
library(stats)
### Import data
data_species <- read_csv(here("data", "detection_aru_target_sp_85.csv")) %>%
mutate(year = as.character(year)) %>%
unite(date, year, month, day) %>%
mutate(date = ymd(date))
data_site_lidar <- read_csv(here("data", "JPRF_veg_Lidar_2015_250.csv")) %>%
mutate(Site = if_else(str_detect(Site, pattern = "N"),
paste0(str_sub(Site, start = 1, end = 1), "_", str_sub(Site, start = 2, end = 3)),
Site)) %>%
rename("site" = "Site")
data_site_ground <- read_csv(here("data", "JPRF_veg_ground_2022.csv")) %>%
mutate(canopy_cover = rowMeans(select(., starts_with("canopy"))),
shrub_height = rowSums(select(., starts_with("shrub")))) %>%
select(site, canopy_cover, shrub_height, starts_with("tree"))
###
### Use the Age_binary info
###
data_site_group <- data_site_lidar %>%
mutate(group = chm_cat) %>%
select(site, group)
###
### Rarefaction curve by grouping
###
inc_sites <- data_species %>%
left_join(data_site_group, by = c("site"))
site_all <- inc_sites %>%
group_by(group) %>%
summarize(detections_total = n_distinct(site, date))
site_group <- inc_sites %>%
group_nest(group, common_name) %>%
mutate(n_days = map_dbl(.x = data, .f =~ .x %>% select(date, site) %>% n_distinct())) %>%
select(-data) %>%
group_nest(group) %>%
mutate(detections_named = map(.x = data, .f =~ setNames(.x$n_days,
.x$common_name) %>%
sort(decreasing = T)))
site_level <- list()
site_level[[1]] <- c(site_all %>% .[1, 2] %>% as.numeric(),
site_group$detections_named[[1]])
site_level[[2]] <- c(site_all %>% .[2, 2] %>% as.numeric(),
site_group$detections_named[[2]])
site_level[[3]] <- c(site_all %>% .[3, 2] %>% as.numeric(),
site_group$detections_named[[3]])
names(site_level) <- site_group %>% pull(group)
### iNEXT - survey sites
out <- iNEXT(site_level,          # The data frame
q=0,                    # The type of diversity estimator (see discussion of the options below)
datatype="incidence_freq",   # The type of analysis
knots=40,                    # The number of data points in your line (more = smoother)
se=TRUE,                     # Logical statement if you want confidence intervals
conf=0.95,                   # The level of confidence intervals
nboot=50)                    # The number of replications to perform - this generates your confidence interval - the bigger the number the longer the run time
###
### iNEXT - ARU days
###
### chm_chat, canopy height
p_canopy_height <- ggiNEXT(out, type = 1, color.var = "Assemblage") +
theme_classic() +   #  type 1 = the diversity estimator
labs(x = "ARU days", y = "Richness") +
ggtitle("Canopy Height")
p_canopy_height
data_site_group <- data_site_lidar %>%
mutate(group = AGE_BIN) %>%
select(site, group)
###
### Rarefaction curve by grouping
###
inc_sites <- data_species %>%
left_join(data_site_group, by = c("site"))
site_all <- inc_sites %>%
group_by(group) %>%
summarize(detections_total = n_distinct(site, date))
site_group <- inc_sites %>%
group_nest(group, common_name) %>%
mutate(n_days = map_dbl(.x = data, .f =~ .x %>% select(date, site) %>% n_distinct())) %>%
select(-data) %>%
group_nest(group) %>%
mutate(detections_named = map(.x = data, .f =~ setNames(.x$n_days,
.x$common_name) %>%
sort(decreasing = T)))
site_level <- list()
site_level[[1]] <- c(site_all %>% .[1, 2] %>% as.numeric(),
site_group$detections_named[[1]])
site_level[[2]] <- c(site_all %>% .[2, 2] %>% as.numeric(),
site_group$detections_named[[2]])
site_level[[3]] <- c(site_all %>% .[3, 2] %>% as.numeric(),
site_group$detections_named[[3]])
names(site_level) <- site_group %>% pull(group)
### iNEXT - survey sites
out <- iNEXT(site_level,          # The data frame
q=0,                    # The type of diversity estimator (see discussion of the options below)
datatype="incidence_freq",   # The type of analysis
knots=40,                    # The number of data points in your line (more = smoother)
se=TRUE,                     # Logical statement if you want confidence intervals
conf=0.95,                   # The level of confidence intervals
nboot=50)                    # The number of replications to perform - this generates your confidence interval - the bigger the number the longer the run time
### AGE_BIN, forest age
p_forest_age <- ggiNEXT(out, type = 1, color.var = "Assemblage") +
theme_classic() +   #  type 1 = the diversity estimator
labs(x = "ARU days", y = "Richness") +
ggtitle("Forest Age")
p_forest_age
data_site_sub <- data_site_lidar %>%
select(49)
data_site_sub
wss <- rep(0, 8) ## calculate the within sums of squares (wss) for 1 to 6 clusters
wss[1] <- (nrow(data_site_sub) - 1) * sum(sapply(data_site_sub, var))
for (i in 2:8){wss[i] <- sum(kmeans(data_site_sub, centers = i)$withinss)}
plot(1:8, wss, type = "b", xlab = "Number of groups",
ylab = "Within groups sum of squares")
# k-means with 4 clusters
groups <- kmeans(data_site_sub, centers = 3)  # since this is in brackets, the object - threegroups - is created and then also "printed" out.
# add the cluster no to justx
groups
str(groups)
data_site_group <- data_site_lidar %>%
mutate(group = groups$cluster) %>%
select(site, group)
###
### Rarefaction curve by grouping
###
inc_sites <- data_species %>%
left_join(data_site_group, by = c("site"))
data_species
data_species$site %>% n_distinct()
###
### Rarefaction curve by grouping
###
inc_sites <- data_species %>%
left_join(data_site_group, by = c("site"))
site_all <- inc_sites %>%
group_by(group) %>%
summarize(detections_total = n_distinct(site, date))
site_group <- inc_sites %>%
group_nest(group, common_name) %>%
mutate(n_days = map_dbl(.x = data, .f =~ .x %>% select(date, site) %>% n_distinct())) %>%
select(-data) %>%
group_nest(group) %>%
mutate(detections_named = map(.x = data, .f =~ setNames(.x$n_days,
.x$common_name) %>%
sort(decreasing = T)))
site_level <- list()
site_level[[1]] <- c(site_all %>% .[1, 2] %>% as.numeric(),
site_group$detections_named[[1]])
site_level[[2]] <- c(site_all %>% .[2, 2] %>% as.numeric(),
site_group$detections_named[[2]])
site_level[[3]] <- c(site_all %>% .[3, 2] %>% as.numeric(),
site_group$detections_named[[3]])
names(site_level) <- site_group %>% pull(group)
### iNEXT - survey sites
out <- iNEXT(site_level,          # The data frame
q=0,                    # The type of diversity estimator (see discussion of the options below)
datatype="incidence_freq",   # The type of analysis
knots=40,                    # The number of data points in your line (more = smoother)
se=TRUE,                     # Logical statement if you want confidence intervals
conf=0.95,                   # The level of confidence intervals
nboot=50)                    # The number of replications to perform - this generates your confidence interval - the bigger the number the longer the run time
### distance to water, #49 with kmeans
p_distance_water <- ggiNEXT(out, type = 1, color.var = "Assemblage") +
theme_classic() +   #  type 1 = the diversity estimator
labs(x = "ARU days", y = "Richness") +
ggtitle("Distance to Water")
p_distance_water
data_site_sub <- data_site_lidar %>%
select(35)
wss <- rep(0, 8) ## calculate the within sums of squares (wss) for 1 to 6 clusters
wss[1] <- (nrow(data_site_sub) - 1) * sum(sapply(data_site_sub, var))
for (i in 2:8){wss[i] <- sum(kmeans(data_site_sub, centers = i)$withinss)}
plot(1:8, wss, type = "b", xlab = "Number of groups",
ylab = "Within groups sum of squares")
# k-means with 4 clusters
groups <- kmeans(data_site_sub, centers = 3)  # since this is in brackets, the object - threegroups - is created and then also "printed" out.
# add the cluster no to justx
groups
str(groups)
data_site_group <- data_site_lidar %>%
mutate(group = groups$cluster) %>%
select(site, group)
###
### Rarefaction curve by grouping
###
inc_sites <- data_species %>%
left_join(data_site_group, by = c("site"))
site_all <- inc_sites %>%
group_by(group) %>%
summarize(detections_total = n_distinct(site, date))
site_group <- inc_sites %>%
group_nest(group, common_name) %>%
mutate(n_days = map_dbl(.x = data, .f =~ .x %>% select(date, site) %>% n_distinct())) %>%
select(-data) %>%
group_nest(group) %>%
mutate(detections_named = map(.x = data, .f =~ setNames(.x$n_days,
.x$common_name) %>%
sort(decreasing = T)))
site_level <- list()
site_level[[1]] <- c(site_all %>% .[1, 2] %>% as.numeric(),
site_group$detections_named[[1]])
site_level[[2]] <- c(site_all %>% .[2, 2] %>% as.numeric(),
site_group$detections_named[[2]])
site_level[[3]] <- c(site_all %>% .[3, 2] %>% as.numeric(),
site_group$detections_named[[3]])
names(site_level) <- site_group %>% pull(group)
### iNEXT - survey sites
out <- iNEXT(site_level,          # The data frame
q=0,                    # The type of diversity estimator (see discussion of the options below)
datatype="incidence_freq",   # The type of analysis
knots=40,                    # The number of data points in your line (more = smoother)
se=TRUE,                     # Logical statement if you want confidence intervals
conf=0.95,                   # The level of confidence intervals
nboot=50)                    # The number of replications to perform - this generates your confidence interval - the bigger the number the longer the run time
### basal area, #35 with kmeans
p_basal_area <- ggiNEXT(out, type = 1, color.var = "Assemblage") +
theme_classic() +   #  type 1 = the diversity estimator
labs(x = "ARU days", y = "Richness") +
ggtitle("Sum of Basal Area")
p_basal_area
data_site_sub <- data_site_lidar %>%
select(23)
wss <- rep(0, 8) ## calculate the within sums of squares (wss) for 1 to 6 clusters
wss[1] <- (nrow(data_site_sub) - 1) * sum(sapply(data_site_sub, var))
for (i in 2:8){wss[i] <- sum(kmeans(data_site_sub, centers = i)$withinss)}
plot(1:8, wss, type = "b", xlab = "Number of groups",
ylab = "Within groups sum of squares")
# k-means with 4 clusters
groups <- kmeans(data_site_sub, centers = 3)  # since this is in brackets, the object - threegroups - is created and then also "printed" out.
# add the cluster no to justx
groups
str(groups)
data_site_group <- data_site_lidar %>%
mutate(group = groups$cluster) %>%
select(site, group)
###
### Rarefaction curve by grouping
###
inc_sites <- data_species %>%
left_join(data_site_group, by = c("site"))
site_all <- inc_sites %>%
group_by(group) %>%
summarize(detections_total = n_distinct(site, date))
site_group <- inc_sites %>%
group_nest(group, common_name) %>%
mutate(n_days = map_dbl(.x = data, .f =~ .x %>% select(date, site) %>% n_distinct())) %>%
select(-data) %>%
group_nest(group) %>%
mutate(detections_named = map(.x = data, .f =~ setNames(.x$n_days,
.x$common_name) %>%
sort(decreasing = T)))
site_level <- list()
site_level[[1]] <- c(site_all %>% .[1, 2] %>% as.numeric(),
site_group$detections_named[[1]])
site_level[[2]] <- c(site_all %>% .[2, 2] %>% as.numeric(),
site_group$detections_named[[2]])
site_level[[3]] <- c(site_all %>% .[3, 2] %>% as.numeric(),
site_group$detections_named[[3]])
names(site_level) <- site_group %>% pull(group)
### iNEXT - survey sites
out <- iNEXT(site_level,          # The data frame
q=0,                    # The type of diversity estimator (see discussion of the options below)
datatype="incidence_freq",   # The type of analysis
knots=40,                    # The number of data points in your line (more = smoother)
se=TRUE,                     # Logical statement if you want confidence intervals
conf=0.95,                   # The level of confidence intervals
nboot=50)                    # The number of replications to perform - this generates your confidence interval - the bigger the number the longer the run time
### number of deciduous trees, #23 with kmeans
p_deciduous_count <- ggiNEXT(out, type = 1, color.var = "Assemblage") +
theme_classic() +   #  type 1 = the diversity estimator
labs(x = "ARU days", y = "Richness") +
ggtitle("Count of Deciduous Trees")
p_deciduous_count
groups
data_site_sub <- data_site_ground %>%
select(shrub_height)
wss <- rep(0, 8) ## calculate the within sums of squares (wss) for 1 to 6 clusters
wss[1] <- (nrow(data_site_sub) - 1) * sum(sapply(data_site_sub, var))
for (i in 2:8){wss[i] <- sum(kmeans(data_site_sub, centers = i)$withinss)}
plot(1:8, wss, type = "b", xlab = "Number of groups",
ylab = "Within groups sum of squares")
# k-means with 4 clusters
groups <- kmeans(data_site_sub, centers = 3)  # since this is in brackets, the object - threegroups - is created and then also "printed" out.
# add the cluster no to justx
groups
str(groups)
data_site_group <- data_site_lidar %>%
mutate(group = groups$cluster) %>%
select(site, group)
###
### Rarefaction curve by grouping
###
inc_sites <- data_species %>%
left_join(data_site_group, by = c("site"))
site_all <- inc_sites %>%
group_by(group) %>%
summarize(detections_total = n_distinct(site, date))
site_group <- inc_sites %>%
group_nest(group, common_name) %>%
mutate(n_days = map_dbl(.x = data, .f =~ .x %>% select(date, site) %>% n_distinct())) %>%
select(-data) %>%
group_nest(group) %>%
mutate(detections_named = map(.x = data, .f =~ setNames(.x$n_days,
.x$common_name) %>%
sort(decreasing = T)))
site_level <- list()
site_level[[1]] <- c(site_all %>% .[1, 2] %>% as.numeric(),
site_group$detections_named[[1]])
site_level[[2]] <- c(site_all %>% .[2, 2] %>% as.numeric(),
site_group$detections_named[[2]])
site_level[[3]] <- c(site_all %>% .[3, 2] %>% as.numeric(),
site_group$detections_named[[3]])
names(site_level) <- site_group %>% pull(group)
### iNEXT - survey sites
out <- iNEXT(site_level,          # The data frame
q=0,                    # The type of diversity estimator (see discussion of the options below)
datatype="incidence_freq",   # The type of analysis
knots=40,                    # The number of data points in your line (more = smoother)
se=TRUE,                     # Logical statement if you want confidence intervals
conf=0.95,                   # The level of confidence intervals
nboot=50)                    # The number of replications to perform - this generates your confidence interval - the bigger the number the longer the run time
### shrub height, groupd measure with kmeans
p_shrub_height <- ggiNEXT(out, type = 1, color.var = "Assemblage") +
theme_classic() +   #  type 1 = the diversity estimator
labs(x = "ARU days", y = "Richness") +
ggtitle("Shrub Height")
p_shrub_height
p_conopy_height
p_canopy_height
p_forest_age
p_distance_water
p_basal_area
p_deciduous_count
p_shrub_height
data_site_lidar <- read_csv(here("data", "JPRF_veg_Lidar_2015_250.csv")) %>%
mutate(Site = if_else(str_detect(Site, pattern = "N"),
paste0(str_sub(Site, start = 1, end = 1), "_", str_sub(Site, start = 2, end = 3)),
Site)) %>%
rename("site" = "Site")
data_site_sub <- data_site_lidar %>%
select(chm_cat)
wss <- rep(0, 8) ## calculate the within sums of squares (wss) for 1 to 6 clusters
wss[1] <- (nrow(data_site_sub) - 1) * sum(sapply(data_site_sub, var))
for (i in 2:8){wss[i] <- sum(kmeans(data_site_sub, centers = i)$withinss)}
plot(1:8, wss, type = "b", xlab = "Number of groups",
ylab = "Within groups sum of squares")
# k-means with 4 clusters
groups <- kmeans(data_site_sub, centers = 3)  # since this is in brackets, the object - threegroups - is created and then also "printed" out.
# add the cluster no to justx
groups
###
### Use the Age_binary info
###
data_site_group <- data_site_lidar %>%
mutate(group = chm_cat) %>%
select(site, group)
data_site_sub <- data_site_lidar %>%
select(chm_cat)
###
### Use the Age_binary info
###
data_site_group <- data_site_lidar %>%
mutate(group = chm_cat) %>%
select(site, group)
wss <- rep(0, 8) ## calculate the within sums of squares (wss) for 1 to 6 clusters
wss[1] <- (nrow(data_site_sub) - 1) * sum(sapply(data_site_sub, var))
for (i in 2:8){wss[i] <- sum(kmeans(data_site_sub, centers = i)$withinss)}
plot(1:8, wss, type = "b", xlab = "Number of groups",
ylab = "Within groups sum of squares")
# k-means with 4 clusters
groups <- kmeans(data_site_sub, centers = 3)  # since this is in brackets, the object - threegroups - is created and then also "printed" out.
# add the cluster no to justx
groups
groups
data_site_sub
# k-means with 4 clusters
groups <- kmeans(data_site_sub, centers = 3)  # since this is in brackets, the object - threegroups - is created and then also "printed" out.
# k-means with 4 clusters
groups <- kmeans(data_site_sub, centers = 3)  # since this is in brackets, the object - threegroups - is created and then also "printed" out.
### Import data
data_species <- read_csv(here("data", "detection_aru_target_sp_85.csv")) %>%
mutate(year = as.character(year)) %>%
unite(date, year, month, day) %>%
mutate(date = ymd(date))
data_site_lidar <- read_csv(here("data", "JPRF_veg_Lidar_2015_250.csv")) %>%
mutate(Site = if_else(str_detect(Site, pattern = "N"),
paste0(str_sub(Site, start = 1, end = 1), "_", str_sub(Site, start = 2, end = 3)),
Site)) %>%
rename("site" = "Site")
data_site_ground <- read_csv(here("data", "JPRF_veg_ground_2022.csv")) %>%
mutate(canopy_cover = rowMeans(select(., starts_with("canopy"))),
shrub_height = rowSums(select(., starts_with("shrub")))) %>%
select(site, canopy_cover, shrub_height, starts_with("tree"))
###
### Use the Age_binary info
###
data_site_group <- data_site_lidar %>%
mutate(group = chm_cat) %>%
select(site, group)
wss <- rep(0, 8) ## calculate the within sums of squares (wss) for 1 to 6 clusters
wss[1] <- (nrow(data_site_sub) - 1) * sum(sapply(data_site_sub, var))
for (i in 2:8){wss[i] <- sum(kmeans(data_site_sub, centers = i)$withinss)}
data_site_group
###
### Use the Age_binary info
###
data_site_group <- data_site_lidar %>%
mutate(group = chm_cat) %>%
select(site, group)
data_site_group
rm(list = ls())
# library
library(tidyverse)
library(here)
library(colortools)
library(iNEXT)
library(gridExtra)
# data import
data_ARU <- read_csv(here("data", "JPRF_species_list", "species_aru_85_validation_info_1.csv"))
data_eBird <- read_csv(here("data", "JPRF_species_list", "species_eBird_info.csv"))
# data import
data_ARU <- read_csv(here("data", "JPRF_species_list", "species_aru_85_validation_info_1.csv"))
data_eBird <- read_csv(here("data", "JPRF_species_list", "species_eBird_info.csv"))
# basic comparison with numbers
aru_only_species <- setdiff(data_ARU$common_name, data_eBird$species) # 31
eBird_only_species <- setdiff(data_eBird$species, data_ARU$common_name) # 24, mostly waterfowl
both_species <- intersect(data_eBird$species, data_ARU$common_name) # 69, these would be common species
all_species <- union(data_eBird$species, data_ARU$common_name) # 124 species in JPRF wooow!
data_ARU
?full_join
# species list
data_list <- full_join(data_ARU, data_eBird)
data_list
View(data_list)
# species list
data_list <- full_join(data_ARU, data_eBird) %>%
mutate(by = join_by("common_name" = "species", `scientific name`, order, family))
# species list
data_list <- full_join(data_ARU, data_eBird) %>%
mutate(by = join_by("common_name" == "species", `scientific name`, order, family))
# species list
data_list <- full_join(data_ARU, data_eBird) %>%
mutate(by = c("common_name" == "species", `scientific name`, order, family))
# species list
data_list <- full_join(data_ARU, data_eBird) %>%
mutate(by = c("common_name" = "species", `scientific name`, order, family))
# species list
data_list <- full_join(data_ARU, data_eBird) %>%
mutate(by = c("common_name" = "species", `scientific name`, order, family))
# species list
data_list <- full_join(data_ARU, data_eBird, by = c("common_name" = "species", `scientific name`, order, family))
# species list
data_list <- full_join(data_ARU, data_eBird, by = c("common_name" = "species", "scientific name", "order", "family"))
View(data_list)
# species list
data_list <- full_join(data_ARU, data_eBird, by = c("common_name" = "species", "scientific name", "order", "family")) %>%
sort(order, best)
# species list
data_list <- full_join(data_ARU, data_eBird, by = c("common_name" = "species", "scientific name", "order", "family")) %>%
arrange(order, best)
View(data_list)
# species list
data_list <- full_join(data_ARU, data_eBird, by = c("common_name" = "species", "scientific name", "order", "family")) %>%
arrange(order, family, best)
View(data_list)
# species list
data_list <- full_join(data_ARU, data_eBird, by = c("common_name" = "species", "scientific name", "order", "family")) %>%
arrange(order, family, best) %>%
mutate(ARU = if_else(is.na(best), "N", "Y"),
eBird = if_else(is.na(Jan), "N", "Y")) %>%
select(common_name, `scientific_name`, order, family, ARU, eBird)
# species list
data_list <- full_join(data_ARU, data_eBird, by = c("common_name" = "species", "scientific name", "order", "family")) %>%
arrange(order, family, best) %>%
mutate(ARU = if_else(is.na(best), "N", "Y"),
eBird = if_else(is.na(Jan), "N", "Y")) %>%
select(common_name, `scientific name`, order, family, ARU, eBird)
View(data_list)
data_list$ARU == "Y"
data_list$ARU == "Y" %>% sum()
sum(data_list$ARU == "Y")
sum(data_list$eBird == "Y")
write_csv(data_list, here("data", "JPRF_species_list", "species_combined.csv"))

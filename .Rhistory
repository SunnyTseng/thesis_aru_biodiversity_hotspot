nboot=50)                    # The number of replications to perform - this generates your confidence interval - the bigger the number the longer the run time
p1 <- ggiNEXT(out, type=1, color.var = "Order.q", grey = TRUE) +
theme_classic() +   #  type 1 = the diversity estimator
labs(x = "ARUs", y = "Richness") +
theme(legend.position = "none",
axis.text = element_text(size = 15, face = "bold"),
axis.title = element_text(size = 25, face = "bold"),
axis.line = element_line(linewidth = 2))
### Data wrangling to the iNEXT format - survey period
inc_days <- data %>%
group_nest(common_name) %>%
mutate(n_days = map_dbl(.x = data, .f =~ .x %>% select(date, site) %>% n_distinct())) %>%
select(-data)
project_level <- list()
project_level[[1]] <- c(data %>% select(date, site) %>% n_distinct(),
setNames(inc_days$n_days, inc_days$common_name) %>% sort(decreasing = T))
names(project_level) <- "project_level"
### iNEXT - survey period
out <- iNEXT(project_level,          # The data frame
q=0,                    # The type of diversity estimator (see discussion of the options below)
datatype="incidence_freq",   # The type of analysis
knots=40,                    # The number of data points in your line (more = smoother)
se=TRUE,                     # Logical statement if you want confidence intervals
conf=0.95,                   # The level of confidence intervals
nboot=50)                    # The number of replications to perform - this generates your confidence interval - the bigger the number the longer the run time
### Import data
dat <- read_csv(here("data", "detection_aru_target_sp_85.csv"))
data <- dat %>%
mutate(year = as.character(year)) %>%
unite(date, year, month, day) %>%
mutate(date =  ymd(date))
### Data wrangling to the iNEXT format - survey sites
inc_sites <- data %>%
group_nest(common_name) %>%
mutate(n_sites = map_dbl(.x = data, .f =~ .x %>% pull(site) %>% n_distinct())) %>%
select(-data)
project_level <- list()
project_level[[1]] <- c(data$site %>% n_distinct(),
setNames(inc_sites$n_sites, inc_sites$common_name) %>% sort(decreasing = T))
names(project_level) <- "project_level"
### iNEXT - survey sites
out <- iNEXT(project_level,          # The data frame
q=0,                    # The type of diversity estimator (see discussion of the options below)
datatype="incidence_freq",   # The type of analysis
knots=40,                    # The number of data points in your line (more = smoother)
se=TRUE,                     # Logical statement if you want confidence intervals
conf=0.95,                   # The level of confidence intervals
nboot=50)                    # The number of replications to perform - this generates your confidence interval - the bigger the number the longer the run time
p1 <- ggiNEXT(out, type=1, color.var = "Order.q", grey = TRUE) +
theme_classic() +   #  type 1 = the diversity estimator
labs(x = "ARUs", y = "Richness") +
theme(legend.position = "none",
axis.text = element_text(size = 15, face = "bold"),
axis.title = element_text(size = 25, face = "bold"),
axis.line = element_line(linewidth = 2))
### Data wrangling to the iNEXT format - survey period
inc_days <- data %>%
group_nest(common_name) %>%
mutate(n_days = map_dbl(.x = data, .f =~ .x %>% select(date, site) %>% n_distinct())) %>%
select(-data)
project_level <- list()
project_level[[1]] <- c(data %>% select(date, site) %>% n_distinct(),
setNames(inc_days$n_days, inc_days$common_name) %>% sort(decreasing = T))
names(project_level) <- "project_level"
### iNEXT - survey period
out <- iNEXT(project_level,          # The data frame
q=0,                    # The type of diversity estimator (see discussion of the options below)
datatype="incidence_freq",   # The type of analysis
knots=40,                    # The number of data points in your line (more = smoother)
se=TRUE,                     # Logical statement if you want confidence intervals
conf=0.95,                   # The level of confidence intervals
nboot=50)                    # The number of replications to perform - this generates your confidence interval - the bigger the number the longer the run time
p2 <- ggiNEXT(out, type=1, color.var = "Order.q", grey = TRUE) +
theme_classic() +   #  type 1 = the diversity estimator
labs(x = "Days", y = "Richness") +
theme(legend.position = "none",
axis.text = element_text(size = 15, face = "bold"),
axis.title = element_text(size = 25, face = "bold"),
axis.line = element_line(linewidth = 2))
p2
p1 / p2
### Import data
dat <- read_csv(here("data", "detection_aru_target_sp_85.csv"))
data <- dat %>%
mutate(year = as.character(year)) %>%
unite(date, year, month, day) %>%
mutate(date =  ymd(date))
### Data wrangling to the iNEXT format - survey sites
inc_sites <- data %>%
group_nest(common_name) %>%
mutate(n_sites = map_dbl(.x = data, .f =~ .x %>% pull(site) %>% n_distinct())) %>%
select(-data)
project_level <- list()
project_level[[1]] <- c(data$site %>% n_distinct(),
setNames(inc_sites$n_sites, inc_sites$common_name) %>% sort(decreasing = T))
names(project_level) <- "project_level"
### iNEXT - survey sites
out <- iNEXT(project_level,          # The data frame
q=0,                    # The type of diversity estimator (see discussion of the options below)
datatype="incidence_freq",   # The type of analysis
knots=40,                    # The number of data points in your line (more = smoother)
se=TRUE,                     # Logical statement if you want confidence intervals
conf=0.95,                   # The level of confidence intervals
nboot=50)                    # The number of replications to perform - this generates your confidence interval - the bigger the number the longer the run time
p1/p2
# library
library(tidyverse)
library(here)
library(colortools)
library(iNEXT)
library(gridExtra)
# data import
data_ARU <- read_csv(here("data", "JPRF_species_list", "species_aru_85_validation_info_1.csv"))
data_eBird <- read_csv(here("data", "JPRF_species_list", "species_eBird_info.csv"))
# basic comparison with numbers
aru_only_species <- setdiff(data_ARU$common_name, data_eBird$species) # 31
eBird_only_species <- setdiff(data_eBird$species, data_ARU$common_name) # 24, mostly waterfowl
both_species <- intersect(data_eBird$species, data_ARU$common_name) # 69, these would be common species
all_species <- union(data_eBird$species, data_ARU$common_name) # 124 species in JPRF wooow!
data_list <- full_join(data_ARU, data_eBird, by = c("common_name" = "species", "scientific name", "order", "family")) %>%
arrange(order, family, best) %>%
mutate(ARU = if_else(is.na(best), "N", "Y"),
eBird = if_else(is.na(Jan), "N", "Y"))
data_list
View(data_list)
# species list
data_list <- full_join(data_ARU, data_eBird, by = c("common_name" = "species", "scientific name", "order", "family")) %>%
arrange(order, family, best) %>%
mutate(ARU = if_else(is.na(best), "N", "Y"),
eBird = if_else(is.na(Jan), "N", "Y")) %>%
select(common_name, `scientific name`, order, family, ARU, c_85_100, eBird)
View(data_list)
data_eBird <- read_csv(here("data", "JPRF_species_list", "species_eBird_info.csv"))
data_eBird
View(data_eBird)
# species list
data_list <- full_join(data_ARU, data_eBird, by = c("common_name" = "species", "scientific name", "order", "family")) %>%
arrange(order, family, best) %>%
mutate(ARU = if_else(is.na(best), "N", "Y"),
eBird = if_else(is.na(Jan), "N", "Y")) %>%
select(common_name, `scientific name`, order, family, ARU, c_85_100, eBird)
write_csv(data_list, here("data", "JPRF_species_list", "species_combined.csv"))
knitr::opts_chunk$set(echo = TRUE)
| zebra stripes | are neat      |    $1 | | | |
library(here)
library(tidyverse)
lecture_schedule <- read_csv(here("lecture_schedule.csv"))
### Library
library(tidyverse)
library(here)
library(iNEXT)
library(patchwork)
library(lubridate)
### Import data
dat <- read_csv(here("data", "detection_aru_target_sp_85.csv"))
data <- dat %>%
mutate(year = as.character(year)) %>%
unite(date, year, month, day) %>%
mutate(date =  ymd(date))
### Data wrangling to the iNEXT format - survey sites
inc_sites <- data %>%
group_nest(common_name) %>%
mutate(n_sites = map_dbl(.x = data, .f =~ .x %>% pull(site) %>% n_distinct())) %>%
select(-data)
project_level <- list()
### Library
library(tidyverse)
### Library
library(tidyverse)
library(here)
library(iNEXT)
library(patchwork)
library(lubridate)
library(pastecs) # won't work if you have not installed the package first!!
library(graphics)
library(stats)
### Import data
data_species <- read_csv(here("data", "detection_aru_target_sp_85.csv")) %>%
mutate(year = as.character(year)) %>%
unite(date, year, month, day) %>%
mutate(date = ymd(date))
data_site_lidar <- read_csv(here("data", "JPRF_veg_Lidar_2015_250.csv")) %>%
mutate(Site = if_else(str_detect(Site, pattern = "N"),
paste0(str_sub(Site, start = 1, end = 1), "_", str_sub(Site, start = 2, end = 3)),
Site)) %>%
rename("site" = "Site")
data_site_ground <- read_csv(here("data", "JPRF_veg_ground_2022.csv")) %>%
mutate(canopy_cover = rowMeans(select(., starts_with("canopy"))),
shrub_height = rowSums(select(., starts_with("shrub")))) %>%
select(site, canopy_cover, shrub_height, starts_with("tree"))
data_site_sub <- data_site_lidar %>%
select(chm_cat)
data_site_group <- data_site_lidar %>%
mutate(group = AGE_BIN) %>%
select(site, group)
### Import data
data_species <- read_csv(here("data", "detection_aru_target_sp_85.csv")) %>%
mutate(year = as.character(year)) %>%
unite(date, year, month, day) %>%
mutate(date = ymd(date))
data_site_lidar <- read_csv(here("data", "JPRF_veg_Lidar_2015_250.csv")) %>%
mutate(Site = if_else(str_detect(Site, pattern = "N"),
paste0(str_sub(Site, start = 1, end = 1), "_", str_sub(Site, start = 2, end = 3)),
Site)) %>%
rename("site" = "Site")
data_site_lidar <- read_csv(here("data", "JPRF_site_veg", "JPRF_veg_Lidar_2015_250.csv")) %>%
mutate(Site = if_else(str_detect(Site, pattern = "N"),
paste0(str_sub(Site, start = 1, end = 1), "_", str_sub(Site, start = 2, end = 3)),
Site)) %>%
rename("site" = "Site")
data_site_ground <- read_csv(here("data", "JPRF_veg_ground_2022.csv")) %>%
mutate(canopy_cover = rowMeans(select(., starts_with("canopy"))),
shrub_height = rowSums(select(., starts_with("shrub")))) %>%
select(site, canopy_cover, shrub_height, starts_with("tree"))
data_site_ground <- read_csv(here("data", "JPRF_site_veg", "JPRF_veg_ground_2022.csv")) %>%
mutate(canopy_cover = rowMeans(select(., starts_with("canopy"))),
shrub_height = rowSums(select(., starts_with("shrub")))) %>%
select(site, canopy_cover, shrub_height, starts_with("tree"))
data_site_sub <- data_site_lidar %>%
select(chm_cat)
###
### Use the Age_binary info
###
data_site_group <- data_site_lidar %>%
mutate(group = chm_cat) %>%
select(site, group)
data_site_group <- data_site_lidar %>%
mutate(group = AGE_BIN) %>%
select(site, group)
###
### Rarefaction curve by grouping
###
inc_sites <- data_species %>%
left_join(data_site_group, by = c("site"))
site_all <- inc_sites %>%
group_by(group) %>%
summarize(detections_total = n_distinct(site, date))
site_group <- inc_sites %>%
group_nest(group, common_name) %>%
mutate(n_days = map_dbl(.x = data, .f =~ .x %>% select(date, site) %>% n_distinct())) %>%
select(-data) %>%
group_nest(group) %>%
mutate(detections_named = map(.x = data, .f =~ setNames(.x$n_days,
.x$common_name) %>%
sort(decreasing = T)))
site_level <- list()
site_level[[1]] <- c(site_all %>% .[1, 2] %>% as.numeric(),
site_group$detections_named[[1]])
site_level[[2]] <- c(site_all %>% .[2, 2] %>% as.numeric(),
site_group$detections_named[[2]])
site_level[[3]] <- c(site_all %>% .[3, 2] %>% as.numeric(),
site_group$detections_named[[3]])
names(site_level) <- site_group %>% pull(group)
### iNEXT - survey sites
out <- iNEXT(site_level,          # The data frame
q=0,                    # The type of diversity estimator (see discussion of the options below)
datatype="incidence_freq",   # The type of analysis
knots=40,                    # The number of data points in your line (more = smoother)
se=TRUE,                     # Logical statement if you want confidence intervals
conf=0.95,                   # The level of confidence intervals
nboot=50)                    # The number of replications to perform - this generates your confidence interval - the bigger the number the longer the run time
### AGE_BIN, forest age
p_forest_age <- ggiNEXT(out, type = 1, color.var = "Assemblage") +
theme_classic() +   #  type 1 = the diversity estimator
labs(x = "ARU days", y = "Richness") +
ggtitle("Forest Age")
out
### AGE_BIN, forest age
p_forest_age <- ggiNEXT(out, type = 1, color.var = "Assemblage") +
theme_classic() +   #  type 1 = the diversity estimator
labs(x = "ARU days", y = "Richness") +
ggtitle("Forest Age")
site_level
###
### Rarefaction curve by grouping
###
inc_sites <- data_species %>%
left_join(data_site_group, by = c("site"))
site_all <- inc_sites %>%
group_by(group) %>%
summarize(detections_total = n_distinct(site, date))
site_group <- inc_sites %>%
group_nest(group, common_name) %>%
mutate(n_days = map_dbl(.x = data, .f =~ .x %>% select(date, site) %>% n_distinct())) %>%
select(-data) %>%
group_nest(group) %>%
mutate(detections_named = map(.x = data, .f =~ setNames(.x$n_days,
.x$common_name) %>%
sort(decreasing = T)))
site_level <- list()
site_level[[1]] <- c(site_all %>% .[1, 2] %>% as.numeric(),
site_group$detections_named[[1]])
site_level[[2]] <- c(site_all %>% .[2, 2] %>% as.numeric(),
site_group$detections_named[[2]])
site_level[[3]] <- c(site_all %>% .[3, 2] %>% as.numeric(),
site_group$detections_named[[3]])
names(site_level) <- site_group %>% pull(group)
### iNEXT - survey sites
out <- iNEXT(site_level,          # The data frame
q=0,                    # The type of diversity estimator (see discussion of the options below)
datatype="incidence_freq",   # The type of analysis
knots=40,                    # The number of data points in your line (more = smoother)
se=TRUE,                     # Logical statement if you want confidence intervals
conf=0.95,                   # The level of confidence intervals
nboot=50)                    # The number of replications to perform - this generates your confidence interval - the bigger the number the longer the run time
### AGE_BIN, forest age
p_forest_age <- ggiNEXT(out, type = 1, color.var = "Assemblage") +
theme_classic() +   #  type 1 = the diversity estimator
labs(x = "ARU days", y = "Richness") +
ggtitle("Forest Age")
### AGE_BIN, forest age
p_forest_age <- ggiNEXT(out, type = 1) +
theme_classic() +   #  type 1 = the diversity estimator
labs(x = "ARU days", y = "Richness") +
ggtitle("Forest Age")
p_forest_age
p_forest_age <- ggiNEXT(out, type=1) +
theme_classic() +   #  type 1 = the diversity estimator
labs(x = "Days", y = "Richness") +
theme(legend.position = "none",
axis.text = element_text(size = 15, face = "bold"),
axis.title = element_text(size = 25, face = "bold"),
axis.line = element_line(linewidth = 2))
p_forest_age
p_forest_age <- ggiNEXT(out, type=1) +
theme_classic() +   #  type 1 = the diversity estimator
labs(x = "Days", y = "Richness") +
theme(legend.position = "none",
axis.text = element_text(size = 15, face = "bold"),
axis.title = element_text(size = 20, face = "bold"),
axis.line = element_line(linewidth = 2))
p_forest_age
p_forest_age <- ggiNEXT(out, type=1, color.var = "Assemblage") +
theme_classic() +   #  type 1 = the diversity estimator
labs(x = "Days", y = "Richness") +
theme(legend.position = "none",
axis.text = element_text(size = 15, face = "bold"),
axis.title = element_text(size = 20, face = "bold"),
axis.line = element_line(linewidth = 2))
p_forest_age <- ggiNEXT(out, type=1, color.var = "Order.q") +
theme_classic() +   #  type 1 = the diversity estimator
labs(x = "Days", y = "Richness") +
theme(legend.position = "none",
axis.text = element_text(size = 15, face = "bold"),
axis.title = element_text(size = 20, face = "bold"),
axis.line = element_line(linewidth = 2))
out
str(out)
p_forest_age <- ggiNEXT(out, type=1, color.var = "Asy") +
theme_classic() +   #  type 1 = the diversity estimator
labs(x = "Days", y = "Richness") +
theme(legend.position = "none",
axis.text = element_text(size = 15, face = "bold"),
axis.title = element_text(size = 20, face = "bold"),
axis.line = element_line(linewidth = 2))
p_forest_age <- ggiNEXT(out, type=1, color.var = "Assemblage") +
theme_classic() +   #  type 1 = the diversity estimator
labs(x = "Days", y = "Richness") +
theme(legend.position = "none",
axis.text = element_text(size = 15, face = "bold"),
axis.title = element_text(size = 20, face = "bold"),
axis.line = element_line(linewidth = 2))
p_forest_age <- ggiNEXT(out, type=1, color.var = "Assemblage") +
theme_classic() +   #  type 1 = the diversity estimator
labs(x = "ARU days", y = "Richness") +
theme(legend.position = "none",
axis.text = element_text(size = 15, face = "bold"),
axis.title = element_text(size = 20, face = "bold"),
axis.line = element_line(linewidth = 2))
p_forest_age <- ggiNEXT(out, type=1) +
theme_classic() +   #  type 1 = the diversity estimator
labs(x = "ARU days", y = "Richness") +
theme(legend.position = "none",
axis.text = element_text(size = 15, face = "bold"),
axis.title = element_text(size = 20, face = "bold"),
axis.line = element_line(linewidth = 2))
p_forest_age
rm(list = ls())
###
### Author: Sunny Tseng
### Date: 2023 July 7th
###
########################
### Library
library(tidyverse)
library(here)
library(iNEXT)
library(patchwork)
library(lubridate)
### Import data
dat <- read_csv(here("data", "detection_aru_target_sp_85.csv"))
data <- dat %>%
mutate(year = as.character(year)) %>%
unite(date, year, month, day) %>%
mutate(date =  ymd(date))
### Data wrangling to the iNEXT format - survey sites
inc_sites <- data %>%
group_nest(common_name) %>%
mutate(n_sites = map_dbl(.x = data, .f =~ .x %>% pull(site) %>% n_distinct())) %>%
select(-data)
project_level <- list()
project_level[[1]] <- c(data$site %>% n_distinct(),
setNames(inc_sites$n_sites, inc_sites$common_name) %>% sort(decreasing = T))
names(project_level) <- "project_level"
### iNEXT - survey sites
out <- iNEXT(project_level,          # The data frame
q=0,                    # The type of diversity estimator (see discussion of the options below)
datatype="incidence_freq",   # The type of analysis
knots=40,                    # The number of data points in your line (more = smoother)
se=TRUE,                     # Logical statement if you want confidence intervals
conf=0.95,                   # The level of confidence intervals
nboot=50)                    # The number of replications to perform - this generates your confidence interval - the bigger the number the longer the run time
p1 <- ggiNEXT(out, type=1, color.var = "Order.q", grey = TRUE) +
theme_classic() +   #  type 1 = the diversity estimator
labs(x = "ARUs", y = "Richness") +
theme(legend.position = "none",
axis.text = element_text(size = 15, face = "bold"),
axis.title = element_text(size = 25, face = "bold"),
axis.line = element_line(linewidth = 2))
### Data wrangling to the iNEXT format - survey period
inc_days <- data %>%
group_nest(common_name) %>%
mutate(n_days = map_dbl(.x = data, .f =~ .x %>% select(date, site) %>% n_distinct())) %>%
select(-data)
project_level <- list()
project_level[[1]] <- c(data %>% select(date, site) %>% n_distinct(),
setNames(inc_days$n_days, inc_days$common_name) %>% sort(decreasing = T))
names(project_level) <- "project_level"
### iNEXT - survey period
out <- iNEXT(project_level,          # The data frame
q=0,                    # The type of diversity estimator (see discussion of the options below)
datatype="incidence_freq",   # The type of analysis
knots=40,                    # The number of data points in your line (more = smoother)
se=TRUE,                     # Logical statement if you want confidence intervals
conf=0.95,                   # The level of confidence intervals
nboot=50)                    # The number of replications to perform - this generates your confidence interval - the bigger the number the longer the run time
p2 <- ggiNEXT(out, type=1, color.var = "Order.q", grey = TRUE) +
theme_classic() +   #  type 1 = the diversity estimator
labs(x = "ARU days", y = "Richness") +
theme(legend.position = "none",
axis.text = element_text(size = 15, face = "bold"),
axis.title = element_text(size = 25, face = "bold"),
axis.line = element_line(linewidth = 2))
p2
p1 / p2
library(here)
library(iNEXT)
library(patchwork)
library(lubridate)
### Import data
dat <- read_csv(here("data", "detection_aru_target_sp_85.csv"))
data <- dat %>%
mutate(year = as.character(year)) %>%
unite(date, year, month, day) %>%
mutate(date =  ymd(date))
### Data wrangling to the iNEXT format - survey sites
inc_sites <- data %>%
group_nest(common_name) %>%
mutate(n_sites = map_dbl(.x = data, .f =~ .x %>% pull(site) %>% n_distinct())) %>%
select(-data)
project_level <- list()
project_level[[1]] <- c(data$site %>% n_distinct(),
setNames(inc_sites$n_sites, inc_sites$common_name) %>% sort(decreasing = T))
names(project_level) <- "project_level"
### iNEXT - survey sites
out <- iNEXT(project_level,          # The data frame
q=0,                    # The type of diversity estimator (see discussion of the options below)
datatype="incidence_freq",   # The type of analysis
knots=40,                    # The number of data points in your line (more = smoother)
se=TRUE,                     # Logical statement if you want confidence intervals
conf=0.95,                   # The level of confidence intervals
nboot=50)                    # The number of replications to perform - this generates your confidence interval - the bigger the number the longer the run time
p1 <- ggiNEXT(out, type=1,  grey = TRUE) +
theme_classic() +   #  type 1 = the diversity estimator
labs(x = "ARUs", y = "Richness") +
theme(legend.position = "none",
axis.text = element_text(size = 15, face = "bold"),
axis.title = element_text(size = 25, face = "bold"),
axis.line = element_line(linewidth = 2))
### Data wrangling to the iNEXT format - survey period
inc_days <- data %>%
group_nest(common_name) %>%
mutate(n_days = map_dbl(.x = data, .f =~ .x %>% select(date, site) %>% n_distinct())) %>%
select(-data)
project_level <- list()
project_level[[1]] <- c(data %>% select(date, site) %>% n_distinct(),
setNames(inc_days$n_days, inc_days$common_name) %>% sort(decreasing = T))
names(project_level) <- "project_level"
### iNEXT - survey period
out <- iNEXT(project_level,          # The data frame
q=0,                    # The type of diversity estimator (see discussion of the options below)
datatype="incidence_freq",   # The type of analysis
knots=40,                    # The number of data points in your line (more = smoother)
se=TRUE,                     # Logical statement if you want confidence intervals
conf=0.95,                   # The level of confidence intervals
nboot=50)                    # The number of replications to perform - this generates your confidence interval - the bigger the number the longer the run time
p2 <- ggiNEXT(out, type=1, color.var = "Order.q", grey = TRUE) +
theme_classic() +   #  type 1 = the diversity estimator
labs(x = "ARU days", y = "Richness") +
theme(legend.position = "none",
axis.text = element_text(size = 15, face = "bold"),
axis.title = element_text(size = 25, face = "bold"),
axis.line = element_line(linewidth = 2))
p2 <- ggiNEXT(out, type=1, grey = TRUE) +
theme_classic() +   #  type 1 = the diversity estimator
labs(x = "ARU days", y = "Richness") +
theme(legend.position = "none",
axis.text = element_text(size = 15, face = "bold"),
axis.title = element_text(size = 25, face = "bold"),
axis.line = element_line(linewidth = 2))
p2
p1 / p2
